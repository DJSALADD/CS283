


# EXTRA CREDIT

RDSH_DEF_PORT=1234
RDSH_DEF_SVR_INTERFACE="0.0.0.0"
RDSH_DEF_CLI_CONNECT="127.0.0.1"

setup() {
    ./dsh -s ${RDSH_DEF_SVR_INTFACE}:${RDSH_DEF_PORT} &
    SERVER_PID=$!
    sleep 1
}

teardown() {
    if ps -p $SERVER_PID > /dev/null; then
        kill $SERVER_PID
    fi
    sleep 1
}

@test "Extra Credit: Multiple clients connecting concurrently" {
    # Start the server in multi-threaded mode
    ./dsh -s -x &
    SERVER_PID=$!
    sleep 1  # Give the server time to start

    # Run two clients in the background
    run timeout 2 ./dsh -c ${RDSH_DEF_CLI_CONNECT}:${1235} <<EOF &
    echo Client 1
    sleep 1
    exit
EOF
    CLIENT1_PID=$!

    run timeout 2 ./dsh -c ${RDSH_DEF_CLI_CONNECT}:${1236} <<EOF &
    echo Client 2
    sleep 1
    exit
EOF
    CLIENT2_PID=$!

    # Wait for both clients to finish
    wait $CLIENT1_PID
    wait $CLIENT2_PID

    # Stop the server
    kill $SERVER_PID

    echo "Output: $output"
    [ "$status" -eq 0 ]
    [[ "$output" =~ "Client 1" ]]
    [[ "$output" =~ "Client 2" ]]
}

@test "Extra Credit: Concurrent command execution" {
    # Start the server in multi-threaded mode
    ./dsh -s -x &
    SERVER_PID=$!
    sleep 1  # Give the server time to start

    # Run two clients in the background
    run timeout 2 ./dsh -c ${RDSH_DEF_CLI_CONNECT}:${RDSH_DEF_PORT} <<EOF &
    sleep 1
    echo Client 1 done
    exit
EOF
    CLIENT1_PID=$!

    run timeout 2 ./dsh -c ${RDSH_DEF_CLI_CONNECT}:${RDSH_DEF_PORT} <<EOF &
    echo Client 2 done
    exit
EOF
    CLIENT2_PID=$!

    # Wait for both clients to finish
    wait $CLIENT1_PID
    wait $CLIENT2_PID

    # Stop the server
    kill $SERVER_PID

    echo "Output: $output"
    [ "$status" -eq 0 ]
    [[ "$output" =~ "Client 1 done" ]]
    [[ "$output" =~ "Client 2 done" ]]
}

@test "Remote: Stress test with multiple clients" {
    # Start the server in multi-threaded mode
    ./dsh -s -x &
    SERVER_PID=$!
    sleep 1  # Give the server time to start

    # Run 5 clients in the background
    for i in {1..5}; do
        run timeout 2 ./dsh -c ${RDSH_DEF_CLI_CONNECT}:${RDSH_DEF_PORT} <<EOF &
        echo Client $i
        sleep 1
        exit
EOF
        CLIENT_PIDS[$i]=$!
    done

    # Wait for all clients to finish
    for pid in "${CLIENT_PIDS[@]}"; do
        wait $pid
    done

    # Stop the server
    kill $SERVER_PID

    echo "Output: $output"
    [ "$status" -eq 0 ]
    for i in {1..5}; do
        [[ "$output" =~ "Client $i" ]]
    done
}

@test "Remote: Handling client disconnections" {
    # Start the server in multi-threaded mode
    ./dsh -s -x &
    SERVER_PID=$!
    sleep 1  # Give the server time to start

    # Run a client that disconnects abruptly
    run timeout 1 ./dsh -c ${RDSH_DEF_CLI_CONNECT}:${RDSH_DEF_PORT} <<EOF &
    echo Client disconnecting
    exit
EOF
    CLIENT_PID=$!

    # Wait for the client to finish
    wait $CLIENT_PID

    # Stop the server
    kill $SERVER_PID

    echo "Output: $output"
    [ "$status" -eq 0 ]
    [[ "$output" =~ "Client disconnecting" ]]
}